%%

state_post_key_exp();
state_post_final_key_xor();
state_post_48_bytes_of_output();

function state_post_key_exp()
  key = [ 0x91 0x28 0x13 0x29 0x2E 0xED 0x36 0xFE 0x3B 0xFC 0x62 0xF1 0xDC 0x51 0xC3 0xAC ];

  rabbit_instance = Rabbit(key);
  rabbit_instance.key_expansion();

  assert(isequal(rabbit_instance.carry, 0));
  assert(isequal(rabbit_instance.state, [ 0xDC51C3AC 0x13292E3D 0x3BFC62F1 0xC3AC9128 0x2E3D36FE 0x62F1DC51 0x91281329 0x36FE3BFC]));
  assert(isequal(rabbit_instance.counter, [ 0x36FE2E3D 0xDC5162F1 0x13299128 0x3BFC36FE 0xC3ACDC51 0x2E3D1329 0x62F13BFC 0x9128C3AC ]));
end

% function state_post_fourth_key_setup_iter()
%   key = [ 0x91 0x28 0x13 0x29 0x2E 0xED 0x36 0xFE 0x3B 0xFC 0x62 0xF1 0xDC 0x51 0xC3 0xAC ];
%   
%   r_inst = Rabbit(key);
%   r_inst.key_setup();
%   assert(isequal(r_inst.carry, 0));
%   assert(isequal(r_inst.state, [ 0x1D059312 0xBDDC3E45 0xF440927D 0x50CBB553 0x36709423 0x0B6F0711 0x3ADA3A7B 0xEB9800C8 ]));
%   assert(isequal(r_inst.counter, [0x6BD17B74 0x2986363E 0xE676C5FC 0x70CF8432 0x10E1AF9E 0x018A47FD 0x97C48931 0xDE5D96F9 ]));
% end

function state_post_final_key_xor()
  key = [ 0x91 0x28 0x13 0x29 0x2E 0xED 0x36 0xFE 0x3B 0xFC 0x62 0xF1 0xDC 0x51 0xC3 0xAC ];
  
  r_inst = Rabbit(key);
  r_inst.key_setup();

  assert(isequal(r_inst.carry, 0));
  assert(isequal(r_inst.state, [ 0x1D059312 0xBDDC3E45 0xF440927D 0x50CBB553 0x36709423 0x0B6F0711 0x3ADA3A7B 0xEB9800C8 ]));
  assert(isequal(r_inst.counter, [0x5DA1EF57 0x22E9312F 0xDCACFF87 0x9B5784FA 0x0DE43C8C 0xBC5679B8 0x63841B4C 0x8E9623AA ]));
end

function state_post_48_bytes_of_output()
  key = [ 0x91 0x28 0x13 0x29 0x2E 0xED 0x36 0xFE 0x3B 0xFC 0x62 0xF1 0xDC 0x51 0xC3 0xAC ];
  s1 = typecast(uint8([0x3D 0x2D 0xF3 0xC8 0x3E 0xF6 0x27 0xA1 0xE9 0x7F 0xC3 0x84 0x87 0xE2 0x51 0x9C]), 'uint128');
  s2 = typecast(uint8([0xF5 0x76 0xCD 0x61 0xF4 0x40 0x5B 0x88 0x96 0xBF 0x53 0xAA 0x85 0x54 0xFC 0x19]), 'uint128');
  s3 = typecast(uint8([0xE5 0x54 0x74 0x73 0xFB 0xDB 0x43 0x50 0x8A 0xE5 0x3B 0x20 0x20 0x4D 0x4C 0x5E]), 'uint128');
  
  r_inst = Rabbit(key);
  r_inst.key_setup();
  r_inst.extract();
 
  assert(isequal(r_inst.carry, 1));
  assert(isequal(r_inst.state, [0xB5428566 0xA2593617 0xFF5578DE 0x7293950F 0x145CE109 0xC93875B0 0xD34306E0 0x43FEEF87]));
  assert(isequal(r_inst.counter, [0x45406940 0x9CD0CFA9 0x7B26E725 0x82F5FEE2 0x87CBDB06 0x5AD06156 0x4B229534 0x087DC224]));

  assert(isequal(r_inst.s(0:3), [s1, s2, s3]));
end



%%
