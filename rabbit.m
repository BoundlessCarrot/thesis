%%

classdef RabbitObj
  % This is to be based off the python class here: https://github.com/Robin-Pwner/Rabbit-Cipher/blob/master/Rabbit_Cipher.py
  properties
    key
    initialization_vector
  end
  methods
    function obj = RabbitObj(key, initialization_vector)
      obj.key = key;
      obj.initialization_vector = initialization_vector;
    end

    function 
    % function [ciphertext, obj] = encrypt(obj, plaintext)
    %   [ciphertext, obj] = rabbit_encrypt(obj.key, obj.initialization_vector, plaintext);
    % end
    % function [plaintext, obj] = decrypt(obj, ciphertext)
    %   [plaintext, obj] = rabbit_decrypt(obj.key, obj.initialization_vector, ciphertext);
    % end
  end


%%

%%

% This is based off the ChatGPt interpretation of the initial paper, with some guidance

mask_32 = 0xFFFFFFFF;
mask_64 = 0xFFFFFFFFFFFFFFFF;
% round_constants = [0x4D34D34D, 0xD34D34D3, 0x34D34D34, 0x4D34D34D, 0xD34D34D3, 0x34D34D34, 0x4D34D34D, 0xD34D34D3];
round_constants = [0x4D34D34D, 0xD34D34D3, 0x34D34D34, 0x4D34D34D]

function key_setup(key0, key1, initialization_vector)
  x = [ initialization_vector, key0[1], key1[0] ];
  c = [ key1[1], initialization_vector, key0[0] ];

  for i = 0:4
    % x = [ x, mod(x[i] + c[i], 2^32) ];
    rabbit_round(x, c, round_constants[i])
  end
end

function rabbit_round(x, c, round_constant)
  % G1 func
  g1 = (x[0] + x[12] + round_constant) & mask_32;
  g1 = (g1 << 7) | (g1 >> 25) & mask_32;
  g1 ^= (x[4] + g1) & mask_32;

  % G2 func
  g2 = (x[4] + x[0] + round_constant) & mask_32;
  g2 = (g2 << 9) | (g2 >> 23) & mask_32;
  g2 ^= (x[8] + g2) & mask_32;

  % Update state
  for j = 0:16
    x[j] = (x[j + 16] + g2 + (x[j] ^ g1)) & mask_32;
    c[j] = (c[j + 16] + g1 + (c[j] ^ g2)) & mask_32;
  end
end

function output = process_block(x, c)
  keystream = string.empty;
  for k = 0:128
    % Gen. clock-controlled bit
    bit = (x[0] ^ c[0]) & 1;
    keystream = [ keystream, bit ];

    % Update internal state if necessary
    if mod(k, 8) == 7
      rabbit_round(x, c, round_constants[mod(k, 8)]
    end
  end
  output = string(keystream);
end

function a = st(b)
  a = char(b);
end

function check(key, iv, out)
  msg = char(0*ones(1, 48));
  cipher = Rabbit(key, iv); % Assuming you have implemented the Rabbit cipher in MATLAB

  data = py.cipher.crypt(msg);
  assert(isequal(data, out));
end

function output = run_rabbit(key0, key1, initialization_vector)
  key_setup(key0, key1, initialization_vector);
  output = process_block(x, c);
end

key1  = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];

key2  = [ 0xAC, 0xC3, 0x51, 0xDC, 0xF1, 0x62, 0xFC, 0x3B, 
  0xFE, 0x36, 0x3D, 0x2E, 0x29, 0x13, 0x28, 0x91 ];

key3  = [ 0x43, 0x00, 0x9B, 0xC0, 0x01, 0xAB, 0xE9, 0xE9,
  0x33, 0xC7, 0xE0, 0x87, 0x15, 0x74, 0x95, 0x83 ];

iv1   = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];

iv2   = [ 0x59, 0x7E, 0x26, 0xC1, 0x75, 0xF5, 0x73, 0xC3 ];

iv3   = [ 0x27, 0x17, 0xF4, 0xD2, 0x1A, 0x56, 0xEB, 0xA6 ];

out1  = [ 0x02, 0xF7, 0x4A, 0x1C, 0x26, 0x45, 0x6B, 0xF5, 
  0xEC, 0xD6, 0xA5, 0x36, 0xF0, 0x54, 0x57, 0xB1,
  0xA7, 0x8A, 0xC6, 0x89, 0x47, 0x6C, 0x69, 0x7B,
  0x39, 0x0C, 0x9C, 0xC5, 0x15, 0xD8, 0xE8, 0x88, 
  0x96, 0xD6, 0x73, 0x16, 0x88, 0xD1, 0x68, 0xDA,
  0x51, 0xD4, 0x0C, 0x70, 0xC3, 0xA1, 0x16, 0xF4 ];

out2  = [ 0x9C, 0x51, 0xE2, 0x87, 0x84, 0xC3, 0x7F, 0xE9, 
  0xA1, 0x27, 0xF6, 0x3E, 0xC8, 0xF3, 0x2D, 0x3D, 
  0x19, 0xFC, 0x54, 0x85, 0xAA, 0x53, 0xBF, 0x96, 
  0x88, 0x5B, 0x40, 0xF4, 0x61, 0xCD, 0x76, 0xF5, 
  0x5E, 0x4C, 0x4D, 0x20, 0x20, 0x3B, 0xE5, 0x8A, 
  0x50, 0x43, 0xDB, 0xFB, 0x73, 0x74, 0x54, 0xE5 ];

out3  = [ 0x9B, 0x60, 0xD0, 0x02, 0xFD, 0x5C, 0xEB, 0x32, 
  0xAC, 0xCD, 0x41, 0xA0, 0xCD, 0x0D, 0xB1, 0x0C, 
  0xAD, 0x3E, 0xFF, 0x4C, 0x11, 0x92, 0x70, 0x7B, 
  0x5A, 0x01, 0x17, 0x0F, 0xCA, 0x9F, 0xFC, 0x95, 
  0x28, 0x74, 0x94, 0x3A, 0xAD, 0x47, 0x41, 0x92, 
  0x3F, 0x7F, 0xFC, 0x8B, 0xDE, 0xE5, 0x49, 0x96 ];

out4  = [ 0xED, 0xB7, 0x05, 0x67, 0x37, 0x5D, 0xCD, 0x7C, 
  0xD8, 0x95, 0x54, 0xF8, 0x5E, 0x27, 0xA7, 0xC6, 
  0x8D, 0x4A, 0xDC, 0x70, 0x32, 0x29, 0x8F, 0x7B, 
  0xD4, 0xEF, 0xF5, 0x04, 0xAC, 0xA6, 0x29, 0x5F, 
  0x66, 0x8F, 0xBF, 0x47, 0x8A, 0xDB, 0x2B, 0xE5, 
  0x1E, 0x6C, 0xDE, 0x29, 0x2B, 0x82, 0xDE, 0x2A ];

out5  = [ 0x6D, 0x7D, 0x01, 0x22, 0x92, 0xCC, 0xDC, 0xE0, 
  0xE2, 0x12, 0x00, 0x58, 0xB9, 0x4E, 0xCD, 0x1F, 
  0x2E, 0x6F, 0x93, 0xED, 0xFF, 0x99, 0x24, 0x7B, 
  0x01, 0x25, 0x21, 0xD1, 0x10, 0x4E, 0x5F, 0xA7, 
  0xA7, 0x9B, 0x02, 0x12, 0xD0, 0xBD, 0x56, 0x23, 
  0x39, 0x38, 0xE7, 0x93, 0xC3, 0x12, 0xC1, 0xEB ];

out6 = [ 0x4D, 0x10, 0x51, 0xA1, 0x23, 0xAF, 0xB6, 0x70, 
  0xBF, 0x8D, 0x85, 0x05, 0xC8, 0xD8, 0x5A, 0x44, 
  0x03, 0x5B, 0xC3, 0xAC, 0xC6, 0x67, 0xAE, 0xAE, 
  0x5B, 0x2C, 0xF4, 0x47, 0x79, 0xF2, 0xC8, 0x96, 
  0xCB, 0x51, 0x15, 0xF0, 0x34, 0xF0, 0x3D, 0x31, 
  0x17, 0x1C, 0xA7, 0x5F, 0x89, 0xFC, 0xCB, 0x9F ];

%%
