pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = c_longdouble;
pub const cc_byte = u8;
pub const cc_uint32 = c_uint;
pub const rabbit_instance = extern struct {
    x: [8]cc_uint32,
    c: [8]cc_uint32,
    carry: cc_uint32,
};
pub export fn rabbit_key_setup(arg_p_instance: [*c]rabbit_instance, arg_p_key: [*c]const cc_byte, arg_key_size: usize) c_int {
    var p_instance = arg_p_instance;
    var p_key = arg_p_key;
    var key_size = arg_key_size;
    var k0: cc_uint32 = undefined;
    var k1: cc_uint32 = undefined;
    var k2: cc_uint32 = undefined;
    var k3: cc_uint32 = undefined;
    var i: cc_uint32 = undefined;
    if (key_size != @bitCast(c_ulong, @as(c_long, @as(c_int, 16)))) return -@as(c_int, 1);
    k0 = @intToPtr([*c]cc_uint32, @ptrToInt(p_key + @bitCast(usize, @intCast(isize, @as(c_int, 0))))).*;
    k1 = @intToPtr([*c]cc_uint32, @ptrToInt(p_key + @bitCast(usize, @intCast(isize, @as(c_int, 4))))).*;
    k2 = @intToPtr([*c]cc_uint32, @ptrToInt(p_key + @bitCast(usize, @intCast(isize, @as(c_int, 8))))).*;
    k3 = @intToPtr([*c]cc_uint32, @ptrToInt(p_key + @bitCast(usize, @intCast(isize, @as(c_int, 12))))).*;
    p_instance.*.x[@intCast(c_uint, @as(c_int, 0))] = k0;
    p_instance.*.x[@intCast(c_uint, @as(c_int, 2))] = k1;
    p_instance.*.x[@intCast(c_uint, @as(c_int, 4))] = k2;
    p_instance.*.x[@intCast(c_uint, @as(c_int, 6))] = k3;
    p_instance.*.x[@intCast(c_uint, @as(c_int, 1))] = (k3 << @intCast(@import("std").math.Log2Int(cc_uint32), 16)) | (k2 >> @intCast(@import("std").math.Log2Int(cc_uint32), 16));
    p_instance.*.x[@intCast(c_uint, @as(c_int, 3))] = (k0 << @intCast(@import("std").math.Log2Int(cc_uint32), 16)) | (k3 >> @intCast(@import("std").math.Log2Int(cc_uint32), 16));
    p_instance.*.x[@intCast(c_uint, @as(c_int, 5))] = (k1 << @intCast(@import("std").math.Log2Int(cc_uint32), 16)) | (k0 >> @intCast(@import("std").math.Log2Int(cc_uint32), 16));
    p_instance.*.x[@intCast(c_uint, @as(c_int, 7))] = (k2 << @intCast(@import("std").math.Log2Int(cc_uint32), 16)) | (k1 >> @intCast(@import("std").math.Log2Int(cc_uint32), 16));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 0))] = rabbit_rotl(k2, @as(c_int, 16));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 2))] = rabbit_rotl(k3, @as(c_int, 16));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 4))] = rabbit_rotl(k0, @as(c_int, 16));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 6))] = rabbit_rotl(k1, @as(c_int, 16));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 1))] = (k0 & @as(c_uint, 4294901760)) | (k1 & @bitCast(c_uint, @as(c_int, 65535)));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 3))] = (k1 & @as(c_uint, 4294901760)) | (k2 & @bitCast(c_uint, @as(c_int, 65535)));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 5))] = (k2 & @as(c_uint, 4294901760)) | (k3 & @bitCast(c_uint, @as(c_int, 65535)));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 7))] = (k3 & @as(c_uint, 4294901760)) | (k0 & @bitCast(c_uint, @as(c_int, 65535)));
    p_instance.*.carry = 0;
    {
        i = 0;
        while (i < @bitCast(c_uint, @as(c_int, 4))) : (i +%= 1) {
            rabbit_next_state(p_instance);
        }
    }
    {
        i = 0;
        while (i < @bitCast(c_uint, @as(c_int, 8))) : (i +%= 1) {
            p_instance.*.c[i] ^= p_instance.*.x[(i +% @bitCast(c_uint, @as(c_int, 4))) & @bitCast(c_uint, @as(c_int, 7))];
        }
    }
    return 0;
}
pub export fn rabbit_iv_setup(arg_p_master_instance: [*c]const rabbit_instance, arg_p_instance: [*c]rabbit_instance, arg_p_iv: [*c]const cc_byte, arg_iv_size: usize) c_int {
    var p_master_instance = arg_p_master_instance;
    var p_instance = arg_p_instance;
    var p_iv = arg_p_iv;
    var iv_size = arg_iv_size;
    var @"i0": cc_uint32 = undefined;
    var @"i1": cc_uint32 = undefined;
    var @"i2": cc_uint32 = undefined;
    var @"i3": cc_uint32 = undefined;
    var i: cc_uint32 = undefined;
    if (iv_size != @bitCast(c_ulong, @as(c_long, @as(c_int, 8)))) return -@as(c_int, 1);
    @"i0" = @intToPtr([*c]cc_uint32, @ptrToInt(p_iv + @bitCast(usize, @intCast(isize, @as(c_int, 0))))).*;
    @"i2" = @intToPtr([*c]cc_uint32, @ptrToInt(p_iv + @bitCast(usize, @intCast(isize, @as(c_int, 4))))).*;
    @"i1" = (@"i0" >> @intCast(@import("std").math.Log2Int(cc_uint32), 16)) | (@"i2" & @as(c_uint, 4294901760));
    @"i3" = (@"i2" << @intCast(@import("std").math.Log2Int(cc_uint32), 16)) | (@"i0" & @bitCast(c_uint, @as(c_int, 65535)));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 0))] = p_master_instance.*.c[@intCast(c_uint, @as(c_int, 0))] ^ @"i0";
    p_instance.*.c[@intCast(c_uint, @as(c_int, 1))] = p_master_instance.*.c[@intCast(c_uint, @as(c_int, 1))] ^ @"i1";
    p_instance.*.c[@intCast(c_uint, @as(c_int, 2))] = p_master_instance.*.c[@intCast(c_uint, @as(c_int, 2))] ^ @"i2";
    p_instance.*.c[@intCast(c_uint, @as(c_int, 3))] = p_master_instance.*.c[@intCast(c_uint, @as(c_int, 3))] ^ @"i3";
    p_instance.*.c[@intCast(c_uint, @as(c_int, 4))] = p_master_instance.*.c[@intCast(c_uint, @as(c_int, 4))] ^ @"i0";
    p_instance.*.c[@intCast(c_uint, @as(c_int, 5))] = p_master_instance.*.c[@intCast(c_uint, @as(c_int, 5))] ^ @"i1";
    p_instance.*.c[@intCast(c_uint, @as(c_int, 6))] = p_master_instance.*.c[@intCast(c_uint, @as(c_int, 6))] ^ @"i2";
    p_instance.*.c[@intCast(c_uint, @as(c_int, 7))] = p_master_instance.*.c[@intCast(c_uint, @as(c_int, 7))] ^ @"i3";
    {
        i = 0;
        while (i < @bitCast(c_uint, @as(c_int, 8))) : (i +%= 1) {
            p_instance.*.x[i] = p_master_instance.*.x[i];
        }
    }
    p_instance.*.carry = p_master_instance.*.carry;
    {
        i = 0;
        while (i < @bitCast(c_uint, @as(c_int, 4))) : (i +%= 1) {
            rabbit_next_state(p_instance);
        }
    }
    return 0;
}
pub export fn rabbit_cipher(arg_p_instance: [*c]rabbit_instance, arg_p_src: [*c]const cc_byte, arg_p_dest: [*c]cc_byte, arg_data_size: usize) c_int {
    var p_instance = arg_p_instance;
    var p_src = arg_p_src;
    var p_dest = arg_p_dest;
    var data_size = arg_data_size;
    var i: cc_uint32 = undefined;
    if ((data_size % @bitCast(c_ulong, @as(c_long, @as(c_int, 16)))) != 0) return -@as(c_int, 1);
    {
        i = 0;
        while (@bitCast(c_ulong, @as(c_ulong, i)) < data_size) : (i +%= @bitCast(c_uint, @as(c_int, 16))) {
            rabbit_next_state(p_instance);
            @ptrCast([*c]cc_uint32, @alignCast(@import("std").meta.alignment([*c]cc_uint32), p_dest + @bitCast(usize, @intCast(isize, @as(c_int, 0))))).* = ((@intToPtr([*c]cc_uint32, @ptrToInt(p_src + @bitCast(usize, @intCast(isize, @as(c_int, 0))))).* ^ p_instance.*.x[@intCast(c_uint, @as(c_int, 0))]) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 5))] >> @intCast(@import("std").math.Log2Int(cc_uint32), 16))) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 3))] << @intCast(@import("std").math.Log2Int(cc_uint32), 16));
            @ptrCast([*c]cc_uint32, @alignCast(@import("std").meta.alignment([*c]cc_uint32), p_dest + @bitCast(usize, @intCast(isize, @as(c_int, 4))))).* = ((@intToPtr([*c]cc_uint32, @ptrToInt(p_src + @bitCast(usize, @intCast(isize, @as(c_int, 4))))).* ^ p_instance.*.x[@intCast(c_uint, @as(c_int, 2))]) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 7))] >> @intCast(@import("std").math.Log2Int(cc_uint32), 16))) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 5))] << @intCast(@import("std").math.Log2Int(cc_uint32), 16));
            @ptrCast([*c]cc_uint32, @alignCast(@import("std").meta.alignment([*c]cc_uint32), p_dest + @bitCast(usize, @intCast(isize, @as(c_int, 8))))).* = ((@intToPtr([*c]cc_uint32, @ptrToInt(p_src + @bitCast(usize, @intCast(isize, @as(c_int, 8))))).* ^ p_instance.*.x[@intCast(c_uint, @as(c_int, 4))]) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 1))] >> @intCast(@import("std").math.Log2Int(cc_uint32), 16))) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 7))] << @intCast(@import("std").math.Log2Int(cc_uint32), 16));
            @ptrCast([*c]cc_uint32, @alignCast(@import("std").meta.alignment([*c]cc_uint32), p_dest + @bitCast(usize, @intCast(isize, @as(c_int, 12))))).* = ((@intToPtr([*c]cc_uint32, @ptrToInt(p_src + @bitCast(usize, @intCast(isize, @as(c_int, 12))))).* ^ p_instance.*.x[@intCast(c_uint, @as(c_int, 6))]) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 3))] >> @intCast(@import("std").math.Log2Int(cc_uint32), 16))) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 1))] << @intCast(@import("std").math.Log2Int(cc_uint32), 16));
            p_src += @bitCast(usize, @intCast(isize, @as(c_int, 16)));
            p_dest += @bitCast(usize, @intCast(isize, @as(c_int, 16)));
        }
    }
    return 0;
}
pub export fn rabbit_prng(arg_p_instance: [*c]rabbit_instance, arg_p_dest: [*c]cc_byte, arg_data_size: usize) c_int {
    var p_instance = arg_p_instance;
    var p_dest = arg_p_dest;
    var data_size = arg_data_size;
    var i: cc_uint32 = undefined;
    if ((data_size % @bitCast(c_ulong, @as(c_long, @as(c_int, 16)))) != 0) return -@as(c_int, 1);
    {
        i = 0;
        while (@bitCast(c_ulong, @as(c_ulong, i)) < data_size) : (i +%= @bitCast(c_uint, @as(c_int, 16))) {
            rabbit_next_state(p_instance);
            @ptrCast([*c]cc_uint32, @alignCast(@import("std").meta.alignment([*c]cc_uint32), p_dest + @bitCast(usize, @intCast(isize, @as(c_int, 0))))).* = (p_instance.*.x[@intCast(c_uint, @as(c_int, 0))] ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 5))] >> @intCast(@import("std").math.Log2Int(cc_uint32), 16))) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 3))] << @intCast(@import("std").math.Log2Int(cc_uint32), 16));
            @ptrCast([*c]cc_uint32, @alignCast(@import("std").meta.alignment([*c]cc_uint32), p_dest + @bitCast(usize, @intCast(isize, @as(c_int, 4))))).* = (p_instance.*.x[@intCast(c_uint, @as(c_int, 2))] ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 7))] >> @intCast(@import("std").math.Log2Int(cc_uint32), 16))) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 5))] << @intCast(@import("std").math.Log2Int(cc_uint32), 16));
            @ptrCast([*c]cc_uint32, @alignCast(@import("std").meta.alignment([*c]cc_uint32), p_dest + @bitCast(usize, @intCast(isize, @as(c_int, 8))))).* = (p_instance.*.x[@intCast(c_uint, @as(c_int, 4))] ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 1))] >> @intCast(@import("std").math.Log2Int(cc_uint32), 16))) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 7))] << @intCast(@import("std").math.Log2Int(cc_uint32), 16));
            @ptrCast([*c]cc_uint32, @alignCast(@import("std").meta.alignment([*c]cc_uint32), p_dest + @bitCast(usize, @intCast(isize, @as(c_int, 12))))).* = (p_instance.*.x[@intCast(c_uint, @as(c_int, 6))] ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 3))] >> @intCast(@import("std").math.Log2Int(cc_uint32), 16))) ^ (p_instance.*.x[@intCast(c_uint, @as(c_int, 1))] << @intCast(@import("std").math.Log2Int(cc_uint32), 16));
            p_dest += @bitCast(usize, @intCast(isize, @as(c_int, 16)));
        }
    }
    return 0;
}
pub fn rabbit_rotl(arg_x: cc_uint32, arg_rot: c_int) callconv(.C) cc_uint32 {
    var x = arg_x;
    var rot = arg_rot;
    return (x << @intCast(@import("std").math.Log2Int(cc_uint32), rot)) | (x >> @intCast(@import("std").math.Log2Int(cc_uint32), @as(c_int, 32) - rot));
}
pub fn rabbit_g_func(arg_x: cc_uint32) callconv(.C) cc_uint32 {
    var x = arg_x;
    var a: cc_uint32 = undefined;
    var b: cc_uint32 = undefined;
    var h: cc_uint32 = undefined;
    var l: cc_uint32 = undefined;
    a = x & @bitCast(c_uint, @as(c_int, 65535));
    b = x >> @intCast(@import("std").math.Log2Int(cc_uint32), 16);
    h = ((((a *% a) >> @intCast(@import("std").math.Log2Int(c_uint), 17)) +% (a *% b)) >> @intCast(@import("std").math.Log2Int(c_uint), 15)) +% (b *% b);
    l = x *% x;
    return h ^ l;
}
pub fn rabbit_next_state(arg_p_instance: [*c]rabbit_instance) callconv(.C) void {
    var p_instance = arg_p_instance;
    var g: [8]cc_uint32 = undefined;
    var c_old: [8]cc_uint32 = undefined;
    var i: cc_uint32 = undefined;
    {
        i = 0;
        while (i < @bitCast(c_uint, @as(c_int, 8))) : (i +%= 1) {
            c_old[i] = p_instance.*.c[i];
        }
    }
    p_instance.*.c[@intCast(c_uint, @as(c_int, 0))] +%= @bitCast(c_uint, @as(c_int, 1295307597)) +% p_instance.*.carry;
    p_instance.*.c[@intCast(c_uint, @as(c_int, 1))] +%= @as(c_uint, 3545052371) +% @bitCast(c_uint, @boolToInt(p_instance.*.c[@intCast(c_uint, @as(c_int, 0))] < c_old[@intCast(c_uint, @as(c_int, 0))]));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 2))] +%= @bitCast(c_uint, @as(c_int, 886263092) + @boolToInt(p_instance.*.c[@intCast(c_uint, @as(c_int, 1))] < c_old[@intCast(c_uint, @as(c_int, 1))]));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 3))] +%= @bitCast(c_uint, @as(c_int, 1295307597) + @boolToInt(p_instance.*.c[@intCast(c_uint, @as(c_int, 2))] < c_old[@intCast(c_uint, @as(c_int, 2))]));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 4))] +%= @as(c_uint, 3545052371) +% @bitCast(c_uint, @boolToInt(p_instance.*.c[@intCast(c_uint, @as(c_int, 3))] < c_old[@intCast(c_uint, @as(c_int, 3))]));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 5))] +%= @bitCast(c_uint, @as(c_int, 886263092) + @boolToInt(p_instance.*.c[@intCast(c_uint, @as(c_int, 4))] < c_old[@intCast(c_uint, @as(c_int, 4))]));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 6))] +%= @bitCast(c_uint, @as(c_int, 1295307597) + @boolToInt(p_instance.*.c[@intCast(c_uint, @as(c_int, 5))] < c_old[@intCast(c_uint, @as(c_int, 5))]));
    p_instance.*.c[@intCast(c_uint, @as(c_int, 7))] +%= @as(c_uint, 3545052371) +% @bitCast(c_uint, @boolToInt(p_instance.*.c[@intCast(c_uint, @as(c_int, 6))] < c_old[@intCast(c_uint, @as(c_int, 6))]));
    p_instance.*.carry = @bitCast(cc_uint32, @boolToInt(p_instance.*.c[@intCast(c_uint, @as(c_int, 7))] < c_old[@intCast(c_uint, @as(c_int, 7))]));
    {
        i = 0;
        while (i < @bitCast(c_uint, @as(c_int, 8))) : (i +%= 1) {
            g[i] = rabbit_g_func(p_instance.*.x[i] +% p_instance.*.c[i]);
        }
    }
    p_instance.*.x[@intCast(c_uint, @as(c_int, 0))] = (g[@intCast(c_uint, @as(c_int, 0))] +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 7))], @as(c_int, 16))) +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 6))], @as(c_int, 16));
    p_instance.*.x[@intCast(c_uint, @as(c_int, 1))] = (g[@intCast(c_uint, @as(c_int, 1))] +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 0))], @as(c_int, 8))) +% g[@intCast(c_uint, @as(c_int, 7))];
    p_instance.*.x[@intCast(c_uint, @as(c_int, 2))] = (g[@intCast(c_uint, @as(c_int, 2))] +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 1))], @as(c_int, 16))) +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 0))], @as(c_int, 16));
    p_instance.*.x[@intCast(c_uint, @as(c_int, 3))] = (g[@intCast(c_uint, @as(c_int, 3))] +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 2))], @as(c_int, 8))) +% g[@intCast(c_uint, @as(c_int, 1))];
    p_instance.*.x[@intCast(c_uint, @as(c_int, 4))] = (g[@intCast(c_uint, @as(c_int, 4))] +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 3))], @as(c_int, 16))) +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 2))], @as(c_int, 16));
    p_instance.*.x[@intCast(c_uint, @as(c_int, 5))] = (g[@intCast(c_uint, @as(c_int, 5))] +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 4))], @as(c_int, 8))) +% g[@intCast(c_uint, @as(c_int, 3))];
    p_instance.*.x[@intCast(c_uint, @as(c_int, 6))] = (g[@intCast(c_uint, @as(c_int, 6))] +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 5))], @as(c_int, 16))) +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 4))], @as(c_int, 16));
    p_instance.*.x[@intCast(c_uint, @as(c_int, 7))] = (g[@intCast(c_uint, @as(c_int, 7))] +% rabbit_rotl(g[@intCast(c_uint, @as(c_int, 6))], @as(c_int, 8))) +% g[@intCast(c_uint, @as(c_int, 5))];
}
pub const __block = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):27:9
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):82:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):88:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):111:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):115:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):121:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):124:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):184:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):206:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):214:9
pub const __USER_LABEL_PREFIX__ = @compileError("unable to translate macro: undefined identifier `_`"); // (no file):305:9
pub const __nonnull = @compileError("unable to translate macro: undefined identifier `_Nonnull`"); // (no file):336:9
pub const __null_unspecified = @compileError("unable to translate macro: undefined identifier `_Null_unspecified`"); // (no file):337:9
pub const __nullable = @compileError("unable to translate macro: undefined identifier `_Nullable`"); // (no file):338:9
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):347:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):348:9
pub const __weak = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):397:9
pub const offsetof = @compileError("unable to translate macro: undefined identifier `__builtin_offsetof`"); // /usr/local/Cellar/zig/0.10.1/lib/zig/include/stddef.h:104:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 15);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 7);
pub const __clang_version__ = "15.0.7 ";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Homebrew Clang 15.0.7";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __BLOCKS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __NO_MATH_ERRNO__ = @as(c_int, 1);
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __corei7 = @as(c_int, 1);
pub const __corei7__ = @as(c_int, 1);
pub const __tune_corei7__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __SGX__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __APPLE_CC__ = @as(c_int, 6000);
pub const __APPLE__ = @as(c_int, 1);
pub const __STDC_NO_THREADS__ = @as(c_int, 1);
pub const __strong = "";
pub const __unsafe_unretained = "";
pub const __DYNAMIC__ = @as(c_int, 1);
pub const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130201, .decimal);
pub const __MACH__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const _RABBIT_H = "";
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_STDDEF_H_misc = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
